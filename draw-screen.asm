// Copy a screen from memory to the screen
BasicUpstart2(Start)
#import "C64.inc"

// This program demonstrates a number of things. First is how to
// copy a screen from memory into the screen and color RAM. This is
// similar to clear-screen.asm, but more complicated since the data
// has to be read from memory and the loop can't be so easily
// unrolled.
//
// Since the loop cannot easily be unrolled, one thing you will
// notice is that this is quite slow when compared to the
// clear-screen.asm example. The inner !loopy loop must use a
// comparison instruction. Since the counter is also used as an
// index register, it must increment. This is only 2 cycles, but
// adding 2 cycles to an inner loop on the C64 is no small thing.
// Over the course of this entire routine, that's 4,000 cycles just
// from that one comprare instruction!
//
// Another thing demonstrated is the use of the zero page to pass
// parameters and address memory. This is particularly useful when
// doing block transfers like this, as it's one of the only ways
// to dereference a pointer in 6502. The alternative would be self-
// modifying code, which is more complicated.
//
// Finally, the use of a macro to wrap parameters for a routine is
// demonstrated. This is particularly useful for a number of reasons.
// First is convenience, calling DRAW_SCREEN(x) is easier than the
// 5 instructions it takes to actually call the routine, but second
// is that this uncouples the code from the code that calls it. If
// you were to move the parameters to a different zero-page location,
// none of the code that calls this routine would need to be updated
// if you use the macro.


Start: {
   DRAW_SCREEN(test_screen)
!: jsr KERNAL_GETIN
   cmp #$0d
   bne !-
   rts
}


.macro DRAW_SCREEN(screen) {
   lda #<screen
   sta $fb
   lda #>screen
   sta $fc
   jsr DrawScreen
}
DrawScreen: {
.const SRC=$fb
.const DST=$fd
   ldy #0                       //set background and border colors
   lda (SRC),y
   sta VIC_BACKGROUND_COLOR
   iny
   lda (SRC),y
   sta VIC_BORDER_COLOR
   lda SRC                      //skip color bytes
   clc
   adc #2
   sta SRC
   bcc !+
   inc SRC+1
!: lda #<SCREEN_DEFAULT         //copy characters
   sta DST
   lda #>SCREEN_DEFAULT
   sta DST+1
   jsr !copy+
   lda #<COLOR_RAM              //copy color RAM
   sta DST
   lda #>COLOR_RAM
   sta DST+1
   jsr !copy+
   rts

!copy:
   ldx #4                       //4 blocks of 250
!loopx:
   ldy #0
!loopy:
   lda (SRC),y
   sta (DST),y
   iny
   cpy #250
   bne !loopy-
   lda SRC                      //increment $fb and $fd words
   clc
   adc #250
   sta SRC
   bcc !+
   inc SRC+1
!: lda DST
   clc
   adc #250
   sta DST
   bcc !+
   inc DST+1
   !: dex
   bne !loopx-
   rts
}


// Screens drawn with https://petscii.krissz.hu/
test_screen:
   .byte COLOR_BLACK            //background color
   .byte COLOR_BLACK            //border color
   //character codes (1000 bytes)
   .byte  85, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 73
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 20,  5, 19, 20, 32, 19,  3, 18,  5,  5, 14, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte 107, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,115
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32,  6,  9, 12, 12, 32, 20,  8,  9, 19, 32, 23,  9, 20,  8, 32, 20,  5, 24, 20, 32,  1, 14,  4, 32,  7, 18,  1, 16,  8,  9,  3, 19, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,  1,  4,  4, 32,  3, 15, 12, 15, 18, 19, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 16,  5, 20, 19,  3,  9,  9, 32,  9, 19, 32, 21, 19,  5,  6, 21, 12, 32,  1, 14,  4, 32, 22,  5, 18, 19,  1, 20,  9, 12,  5, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32,  3,  1, 18,  4, 32,  7,  1, 13,  5, 19, 32,  3,  1, 14, 32, 13,  1, 11,  5, 32, 21, 19,  5, 32, 15,  6, 32, 65, 83, 88, 90, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32,233,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32,233,160,160,160,160,149,147,133,160,146,133,150,133,146,147,133,160,148,133,152,148,160,160,160,160,160,160,160,160,160,160, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160, 32, 32, 32, 32, 93
   .byte  93, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93
   .byte  74, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 75
   //color codes (1000 bytes)
   .byte   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7
   .byte   7, 14, 14, 14, 14, 14, 14, 14, 14,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7
   .byte   7, 14, 14, 14, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14,  5,  5,  5,  5,  1,  5,  5,  5,  5,  1,  5,  5,  5,  5,  1,  5,  5,  5,  5,  1,  5,  5,  5,  1,  5,  5,  5,  5,  5,  5,  5,  5,  1,  1,  1,  7
   .byte   7, 14, 14, 14, 14, 14,  7,  7,  7,  7,  7,  7, 14, 14,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14, 14,  7, 14, 14,  7,  7,  1,  1,  1,  1,  1, 13, 13, 13,  1,  2,  3,  4,  5,  6,  7, 14, 14, 14, 14,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14,  7,  7,  7,  7,  7, 14, 14, 14, 14,  7, 14, 14,  7,  7,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14,  7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 14, 14, 14, 14,  7
   .byte   7, 14, 14,  7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 14, 14, 14, 14,  7
   .byte   7, 14,  7,  7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14,  1,  1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14,  7
   .byte   7, 14, 14, 14,  1,  1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14,  7,  7
   .byte   7, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14,  7,  7
   .byte   7, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14,  7,  7
   .byte   7, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14,  7,  7
   .byte   7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 14, 14, 14, 14,  7
   .byte   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7
   
